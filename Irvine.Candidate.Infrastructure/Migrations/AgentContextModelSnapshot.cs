// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Irvine.Agent.Infrastructure;

namespace Irvine.Agent.Infrastructure.Migrations
{
    [DbContext(typeof(CandidateContext))]
    partial class CandidateContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("Relational:Sequence:agent.candidateseq", "'candidateseq', 'agent', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:agent.experienceseq", "'experienceseq', 'agent', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:agent.locationseq", "'locationseq', 'agent', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:agent.providerseq", "'providerseq', 'agent', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:agent.skillseq", "'skillseq', 'agent', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BuildingBlocks.Infrastructure.Services.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("vielitrequests");
                });

            modelBuilder.Entity("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "candidateseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "agent")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("CandidateStatusId");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int?>("LocationId");

                    b.Property<string>("LookingForNext");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("PrescreeningLastVerified");

                    b.Property<string>("ResumeUrl");

                    b.Property<DateTimeOffset?>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("CandidateStatusId");

                    b.HasIndex("LocationId");

                    b.ToTable("candidates","agent");
                });

            modelBuilder.Entity("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.CandidateSkill", b =>
                {
                    b.Property<int>("CandidateId");

                    b.Property<int>("SkillId");

                    b.HasKey("CandidateId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CandidateSkill");
                });

            modelBuilder.Entity("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.CandidateStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("agentstatus","agent");
                });

            modelBuilder.Entity("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "experienceseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "agent")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int?>("CandidateId");

                    b.Property<int>("TypeId");

                    b.Property<int>("Years");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("TypeId");

                    b.ToTable("experiences","agent");
                });

            modelBuilder.Entity("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.ExperienceType", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("experiencetypes","agent");
                });

            modelBuilder.Entity("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "locationseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "agent")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("City");

                    b.Property<string>("County");

                    b.Property<string>("State");

                    b.HasKey("Id");

                    b.ToTable("location","agent");
                });

            modelBuilder.Entity("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "skillseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "agent")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("skill","agent");
                });

            modelBuilder.Entity("Irvine.Candidate.Domain.AggregatesModel.ProviderAggregate.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "providerseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "agent")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("IdentityGuid")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdentityGuid")
                        .IsUnique();

                    b.ToTable("provider","agent");
                });

            modelBuilder.Entity("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Candidate", b =>
                {
                    b.HasOne("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.CandidateStatus", "CandidateStatus")
                        .WithMany()
                        .HasForeignKey("CandidateStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.OwnsOne("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Rate", "Rate", b1 =>
                        {
                            b1.Property<int>("CandidateId");

                            b1.Property<int>("MaximumRate");

                            b1.Property<int>("MinimumRate");

                            b1.ToTable("candidates","agent");

                            b1.HasOne("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Candidate")
                                .WithOne("Rate")
                                .HasForeignKey("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Rate", "CandidateId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.CandidateSkill", b =>
                {
                    b.HasOne("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Candidate", "Candidate")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Skill", "Skill")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Experience", b =>
                {
                    b.HasOne("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.Candidate")
                        .WithMany("Experiences")
                        .HasForeignKey("CandidateId");

                    b.HasOne("Irvine.Candidate.Domain.AggregatesModel.CandidateAggregate.ExperienceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
